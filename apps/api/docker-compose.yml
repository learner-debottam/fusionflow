version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fusionflow-postgres
    environment:
      POSTGRES_DB: fusionflow
      POSTGRES_USER: fusionflow
      POSTGRES_PASSWORD: fusionflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fusionflow -d fusionflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fusionflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fusionflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass fusionflow
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - fusionflow-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fusionflow-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fusionflow-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fusionflow-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fusionflow-network

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: fusionflow-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: fusionflow
      CLICKHOUSE_USER: fusionflow
      CLICKHOUSE_PASSWORD: fusionflow
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/init-clickhouse.sql:/docker-entrypoint-initdb.d/init-clickhouse.sql
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fusionflow-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    container_name: fusionflow-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    depends_on:
      - jaeger
    networks:
      - fusionflow-network

  # Jaeger (for tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: fusionflow-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - fusionflow-network

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: fusionflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - otel-collector
    networks:
      - fusionflow-network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: fusionflow-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
      - jaeger
    networks:
      - fusionflow-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: fusionflow-minio
    ports:
      - "9001:9001"
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: fusionflow
      MINIO_ROOT_PASSWORD: fusionflow123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fusionflow-network

  # Keycloak (for authentication)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: fusionflow-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    command: start-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fusionflow-network

  # API Server (for development)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fusionflow-api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://fusionflow:fusionflow@postgres:5432/fusionflow
      REDIS_URL: redis://:fusionflow@redis:6379/0
      KAFKA_BROKERS: kafka:29092
      CLICKHOUSE_URL: http://clickhouse:8123
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      KEYCLOAK_JWKS_URI: http://keycloak:8080/realms/master/protocol/openid-connect/certs
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/master
      KEYCLOAK_AUDIENCE: fusionflow-api
      CORS_ORIGIN: http://localhost:3001
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - fusionflow-network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  fusionflow-network:
    driver: bridge
