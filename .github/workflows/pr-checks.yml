name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/flow-dsl/**'
      - 'examples/flows/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Quick validation for PRs
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: |
          cd packages/flow-dsl
          pnpm type-check

      - name: Lint check
        run: |
          cd packages/flow-dsl
          pnpm lint

      - name: Format check
        run: |
          cd packages/flow-dsl
          pnpm format:check

      - name: Build check
        run: |
          cd packages/flow-dsl
          pnpm build

      - name: Quick test
        run: |
          cd packages/flow-dsl
          pnpm test:run

  # Security check for PRs
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: |
          cd packages/flow-dsl
          pnpm security-check

      - name: Check for secrets in examples
        run: |
          echo "üîç Checking for hardcoded secrets..."
          
          # Check for hardcoded secrets in YAML files
          if grep -r -i "password\|secret\|token\|key" examples/flows/ | grep -v "\\$\\{env\\."; then
            echo "‚ùå Found potential hardcoded secrets in examples"
            grep -r -i "password\|secret\|token\|key" examples/flows/ | grep -v "\\$\\{env\\."
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets found"

  # Example validation for PRs
  example-validation:
    name: Example Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Flow DSL
        run: |
          cd packages/flow-dsl
          pnpm build

      - name: Validate examples
        run: |
          cd packages/flow-dsl
          pnpm validate-examples

  # PR comment with results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [quick-validation, security-check, example-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });
            
            const jobs = ['quick-validation', 'security-check', 'example-validation'];
            const results = {};
            
            for (const check of checks.check_runs) {
              if (jobs.includes(check.name)) {
                results[check.name] = check.conclusion;
              }
            }
            
            let status = '‚úÖ All checks passed!';
            let details = '';
            
            if (Object.values(results).includes('failure')) {
              status = '‚ùå Some checks failed';
            } else if (Object.values(results).includes('cancelled')) {
              status = '‚ö†Ô∏è Some checks were cancelled';
            }
            
            for (const [job, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              details += `\n- ${emoji} ${job}: ${result || 'pending'}`;
            }
            
            const body = `## Flow DSL PR Check Results
            
            ${status}
            
            ### Job Results:${details}
            
            ---
            *This comment was automatically generated by the Flow DSL CI system.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
